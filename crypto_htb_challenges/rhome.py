from sage.all import * #pip3 install sagemath
from Crypto.Util.number import *
from Crypto.Cipher import AES
from hashlib import sha256

p = 91577634899494223999920708214773377103005805380782071901818562732996694385538776971754640629858060862217037343710323778715018856655107887873468051514546161374655027099
g = 47070087659286697478505361264431214609231120689844922428159397484717831578905245105056912416924734244066017927839018991169524300541915969697739282862195203956783407973
A = 37781188479905307420584966301393429843579226907110740639725485298538911227622039225645118842199217491476761897144240894498920967103920047642188494094756971529021160087
B = 26684133235810091775002521783713132753631974476951289144308945068334563956297079342874426391471377643745181886904734554499279044687332330373722468988928113844325926995
ENCRYPTED = bytes.fromhex("c6f19c4e33c9b39f9070528452e09dbef36ea05a4e7ce076171bd75be2184a51")

b = mod(g,p)
a = discrete_log(A,b)
#sharedsecret
ss = int(pow(B,a,p))

print("a",a)
print("b",b)
print("ss",ss)

def decrypt(flag_part):
    key = sha256(long_to_bytes(ss)).digest()[:16]
    cipher = AES.new(key, AES.MODE_ECB)
    ct = cipher.decrypt(ENCRYPTED)
    return f"decrypted = {ct}"

print(decrypt(ENCRYPTED))
